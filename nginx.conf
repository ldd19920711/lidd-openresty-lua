worker_processes  1;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_package_path 'C:\\Program Files (x86)\\Lua\\5.1\\?.lua;;';  

    lua_shared_dict my_cache 2048k; 


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        location / {
            # 重写请求
            rewrite_by_lua_block {
                local ngx = ngx

                -- 获取请求的原始 URI
                local request_uri = ngx.var.request_uri

                -- 打印原始 URI
                ngx.log(ngx.ERR, "Original request URI: ", request_uri)

                -- 获取所有 URL 参数
                local args = ngx.req.get_uri_args()

                -- 打印所有 URL 参数
                for key, val in pairs(args) do
                    ngx.log(ngx.ERR, "URL parameter: ", key, " = ", val)
                end

                -- 获取 path 参数
                local base64_path = request_uri:match("/([^%?]+)")

                -- 打印 path 参数的值
                ngx.log(ngx.ERR, "Original path parameter: ", base64_path)

                if not base64_path then
                    ngx.log(ngx.ERR, "No path parameter provided")
                    return ngx.exit(400)
                end

                local decoded_path = ngx.decode_base64(base64_path)
                if not decoded_path then
                    ngx.log(ngx.ERR, "Failed to decode path")
                    return ngx.exit(400)
                end

                -- 打印解码后的路径
                ngx.log(ngx.ERR, "Decoded path: ", decoded_path)

                -- 获取查询参数
                local args = ngx.req.get_uri_args()
                local new_args = {}

                -- 处理查询参数，将 "_lidd" 移除
                for key, val in pairs(args) do
                    local new_key = key:gsub("_lidd", "")
                    new_args[new_key] = val
                end

                -- 打印新的查询参数
                for key, val in pairs(new_args) do
                    ngx.log(ngx.ERR, "New parameter: ", key, " = ", val)
                end

                -- 设置新的查询参数
                ngx.req.set_uri_args(new_args)

                ngx.req.set_uri("/" .. decoded_path)
            }
            # 重写请求(POST参数)
            access_by_lua_block {
                local ngx = ngx
                ngx.req.read_body()  -- 读取请求体

                local method = ngx.req.get_method()

                if method == "POST" then
                    local args = ngx.req.get_post_args()
                    local new_args = {}

                    -- 处理 POST 请求参数，将 "_bictory" 移除
                    for key, val in pairs(args) do
                        local new_key = key:gsub("_bictory", "")
                        new_args[new_key] = val
                    end

                    -- 打印新的 POST 参数
                    for key, val in pairs(new_args) do
                        ngx.log(ngx.ERR, "New POST parameter: ", key, " = ", val)
                    end

                    -- 设置新的 POST 参数
                    ngx.req.set_body_data(ngx.encode_args(new_args))
                end
            }

            client_max_body_size 50M;
            client_body_buffer_size 5000k;
            proxy_pass 'https://www.lidd.com';
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse off;
            proxy_http_version 1.1;
            # 确保响应体可以被正确处理
            proxy_buffering off;  
            # 禁止gzip
            proxy_set_header Accept-Encoding '';
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            ## 修改cookie domain
            proxy_cookie_domain lidd.com localhost;
            
            
            header_filter_by_lua_block {
                -- 清除 Content-Length 以便我们可以更改响应体
                ngx.header.content_length = nil
                ngx.ctx.buffer = ""
            }

            # 重写响应结果
            body_filter_by_lua_block {
                local ngx = ngx

                -- 打印 ngx.arg[1] 的类型
                ngx.log(ngx.ERR, "ngx.arg[1] type: ", type(ngx.arg[1]))

                -- 初始化缓冲区
                if not ngx.ctx.buffer then
                    ngx.ctx.buffer = {}
                elseif type(ngx.ctx.buffer) ~= "table" then
                    ngx.ctx.buffer = { ngx.ctx.buffer }
                end

                -- 累积响应体
                table.insert(ngx.ctx.buffer, ngx.arg[1])

                -- 打印当前累积的响应体长度
                local current_length = 0
                for _, chunk in ipairs(ngx.ctx.buffer) do
                    current_length = current_length + #chunk
                end
                ngx.log(ngx.ERR, "Current buffer length: ", current_length)

                -- 打印 ngx.arg[1] 的前100个字符
                ngx.log(ngx.ERR, "ngx.arg[1] first 100 chars: ", ngx.encode_base64(string.sub(ngx.arg[1], 1, 100)))

                -- 当响应体完全接收后，进行处理
                if ngx.arg[2] then
                    -- 合并所有响应体片段
                    local complete_body = table.concat(ngx.ctx.buffer)
                    
                    -- 打印完整的响应体长度
                    ngx.log(ngx.ERR, "Complete buffer length: ", #complete_body)

                    -- 打印完整的响应体前1000个字符
                    ngx.log(ngx.ERR, "Complete buffer first 1000 chars: ", ngx.encode_base64(string.sub(complete_body, 1, 1000)))

                    -- 替换响应体中的 `":` 为 `_lidd":`
                    local modified_body = complete_body:gsub('([^\\])":', '%1_lidd":')

                    -- 设置修改后的响应体
                    ngx.arg[1] = modified_body

                    -- 清空缓冲区
                    ngx.ctx.buffer = nil
                else
                    ngx.arg[1] = nil  -- 清空当前响应体以继续累积
                end
            }
        }

        location /static { 
            alias /etc/nginx/html/static/;
            try_files $uri $uri/ =404;
            index index.html index.htm;
        }   
        # 设置ws转发
        location /mapi/ws/user {
            client_max_body_size 50M;
            proxy_pass https://ws.lidd.com ;
            proxy_http_version 1.1;
            proxy_set_header Host $proxy_host;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 自定义变量 connection_upgrade
            set $connection_upgrade '';
            if ($http_upgrade) {
                set $connection_upgrade 'upgrade';
            }
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse off;
      }     
        location /ws/quote/v1 {
            client_max_body_size 50M;
            proxy_pass https://ws.lidd.com ;
            proxy_http_version 1.1;
            proxy_set_header Host $proxy_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 自定义变量 connection_upgrade
            set $connection_upgrade '';
            if ($http_upgrade) {
                set $connection_upgrade 'upgrade';
            }
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse off;
      }

    }

}
